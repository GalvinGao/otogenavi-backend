// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/GalvinGao/otogenavi-backend/internal/ent/cabinet"
	"github.com/GalvinGao/otogenavi-backend/internal/ent/game"
	"github.com/GalvinGao/otogenavi-backend/internal/ent/location"
	"github.com/GalvinGao/otogenavi-backend/internal/ent/predicate"
)

// CabinetUpdate is the builder for updating Cabinet entities.
type CabinetUpdate struct {
	config
	hooks    []Hook
	mutation *CabinetMutation
}

// Where appends a list predicates to the CabinetUpdate builder.
func (cu *CabinetUpdate) Where(ps ...predicate.Cabinet) *CabinetUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetCount sets the "count" field.
func (cu *CabinetUpdate) SetCount(i int) *CabinetUpdate {
	cu.mutation.ResetCount()
	cu.mutation.SetCount(i)
	return cu
}

// SetNillableCount sets the "count" field if the given value is not nil.
func (cu *CabinetUpdate) SetNillableCount(i *int) *CabinetUpdate {
	if i != nil {
		cu.SetCount(*i)
	}
	return cu
}

// AddCount adds i to the "count" field.
func (cu *CabinetUpdate) AddCount(i int) *CabinetUpdate {
	cu.mutation.AddCount(i)
	return cu
}

// ClearCount clears the value of the "count" field.
func (cu *CabinetUpdate) ClearCount() *CabinetUpdate {
	cu.mutation.ClearCount()
	return cu
}

// SetLocationID sets the "location_id" field.
func (cu *CabinetUpdate) SetLocationID(s string) *CabinetUpdate {
	cu.mutation.SetLocationID(s)
	return cu
}

// SetNillableLocationID sets the "location_id" field if the given value is not nil.
func (cu *CabinetUpdate) SetNillableLocationID(s *string) *CabinetUpdate {
	if s != nil {
		cu.SetLocationID(*s)
	}
	return cu
}

// SetGameID sets the "game_id" field.
func (cu *CabinetUpdate) SetGameID(s string) *CabinetUpdate {
	cu.mutation.SetGameID(s)
	return cu
}

// SetNillableGameID sets the "game_id" field if the given value is not nil.
func (cu *CabinetUpdate) SetNillableGameID(s *string) *CabinetUpdate {
	if s != nil {
		cu.SetGameID(*s)
	}
	return cu
}

// SetLocation sets the "location" edge to the Location entity.
func (cu *CabinetUpdate) SetLocation(l *Location) *CabinetUpdate {
	return cu.SetLocationID(l.ID)
}

// SetGame sets the "game" edge to the Game entity.
func (cu *CabinetUpdate) SetGame(g *Game) *CabinetUpdate {
	return cu.SetGameID(g.ID)
}

// Mutation returns the CabinetMutation object of the builder.
func (cu *CabinetUpdate) Mutation() *CabinetMutation {
	return cu.mutation
}

// ClearLocation clears the "location" edge to the Location entity.
func (cu *CabinetUpdate) ClearLocation() *CabinetUpdate {
	cu.mutation.ClearLocation()
	return cu
}

// ClearGame clears the "game" edge to the Game entity.
func (cu *CabinetUpdate) ClearGame() *CabinetUpdate {
	cu.mutation.ClearGame()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CabinetUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CabinetUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CabinetUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CabinetUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CabinetUpdate) check() error {
	if _, ok := cu.mutation.LocationID(); cu.mutation.LocationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Cabinet.location"`)
	}
	if _, ok := cu.mutation.GameID(); cu.mutation.GameCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Cabinet.game"`)
	}
	return nil
}

func (cu *CabinetUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(cabinet.Table, cabinet.Columns, sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeString))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Count(); ok {
		_spec.SetField(cabinet.FieldCount, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedCount(); ok {
		_spec.AddField(cabinet.FieldCount, field.TypeInt, value)
	}
	if cu.mutation.CountCleared() {
		_spec.ClearField(cabinet.FieldCount, field.TypeInt)
	}
	if cu.mutation.LocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cabinet.LocationTable,
			Columns: []string{cabinet.LocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.LocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cabinet.LocationTable,
			Columns: []string{cabinet.LocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.GameCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cabinet.GameTable,
			Columns: []string{cabinet.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.GameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cabinet.GameTable,
			Columns: []string{cabinet.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cabinet.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CabinetUpdateOne is the builder for updating a single Cabinet entity.
type CabinetUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CabinetMutation
}

// SetCount sets the "count" field.
func (cuo *CabinetUpdateOne) SetCount(i int) *CabinetUpdateOne {
	cuo.mutation.ResetCount()
	cuo.mutation.SetCount(i)
	return cuo
}

// SetNillableCount sets the "count" field if the given value is not nil.
func (cuo *CabinetUpdateOne) SetNillableCount(i *int) *CabinetUpdateOne {
	if i != nil {
		cuo.SetCount(*i)
	}
	return cuo
}

// AddCount adds i to the "count" field.
func (cuo *CabinetUpdateOne) AddCount(i int) *CabinetUpdateOne {
	cuo.mutation.AddCount(i)
	return cuo
}

// ClearCount clears the value of the "count" field.
func (cuo *CabinetUpdateOne) ClearCount() *CabinetUpdateOne {
	cuo.mutation.ClearCount()
	return cuo
}

// SetLocationID sets the "location_id" field.
func (cuo *CabinetUpdateOne) SetLocationID(s string) *CabinetUpdateOne {
	cuo.mutation.SetLocationID(s)
	return cuo
}

// SetNillableLocationID sets the "location_id" field if the given value is not nil.
func (cuo *CabinetUpdateOne) SetNillableLocationID(s *string) *CabinetUpdateOne {
	if s != nil {
		cuo.SetLocationID(*s)
	}
	return cuo
}

// SetGameID sets the "game_id" field.
func (cuo *CabinetUpdateOne) SetGameID(s string) *CabinetUpdateOne {
	cuo.mutation.SetGameID(s)
	return cuo
}

// SetNillableGameID sets the "game_id" field if the given value is not nil.
func (cuo *CabinetUpdateOne) SetNillableGameID(s *string) *CabinetUpdateOne {
	if s != nil {
		cuo.SetGameID(*s)
	}
	return cuo
}

// SetLocation sets the "location" edge to the Location entity.
func (cuo *CabinetUpdateOne) SetLocation(l *Location) *CabinetUpdateOne {
	return cuo.SetLocationID(l.ID)
}

// SetGame sets the "game" edge to the Game entity.
func (cuo *CabinetUpdateOne) SetGame(g *Game) *CabinetUpdateOne {
	return cuo.SetGameID(g.ID)
}

// Mutation returns the CabinetMutation object of the builder.
func (cuo *CabinetUpdateOne) Mutation() *CabinetMutation {
	return cuo.mutation
}

// ClearLocation clears the "location" edge to the Location entity.
func (cuo *CabinetUpdateOne) ClearLocation() *CabinetUpdateOne {
	cuo.mutation.ClearLocation()
	return cuo
}

// ClearGame clears the "game" edge to the Game entity.
func (cuo *CabinetUpdateOne) ClearGame() *CabinetUpdateOne {
	cuo.mutation.ClearGame()
	return cuo
}

// Where appends a list predicates to the CabinetUpdate builder.
func (cuo *CabinetUpdateOne) Where(ps ...predicate.Cabinet) *CabinetUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CabinetUpdateOne) Select(field string, fields ...string) *CabinetUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Cabinet entity.
func (cuo *CabinetUpdateOne) Save(ctx context.Context) (*Cabinet, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CabinetUpdateOne) SaveX(ctx context.Context) *Cabinet {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CabinetUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CabinetUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CabinetUpdateOne) check() error {
	if _, ok := cuo.mutation.LocationID(); cuo.mutation.LocationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Cabinet.location"`)
	}
	if _, ok := cuo.mutation.GameID(); cuo.mutation.GameCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Cabinet.game"`)
	}
	return nil
}

func (cuo *CabinetUpdateOne) sqlSave(ctx context.Context) (_node *Cabinet, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(cabinet.Table, cabinet.Columns, sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeString))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Cabinet.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cabinet.FieldID)
		for _, f := range fields {
			if !cabinet.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != cabinet.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Count(); ok {
		_spec.SetField(cabinet.FieldCount, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedCount(); ok {
		_spec.AddField(cabinet.FieldCount, field.TypeInt, value)
	}
	if cuo.mutation.CountCleared() {
		_spec.ClearField(cabinet.FieldCount, field.TypeInt)
	}
	if cuo.mutation.LocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cabinet.LocationTable,
			Columns: []string{cabinet.LocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.LocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cabinet.LocationTable,
			Columns: []string{cabinet.LocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.GameCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cabinet.GameTable,
			Columns: []string{cabinet.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.GameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cabinet.GameTable,
			Columns: []string{cabinet.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Cabinet{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cabinet.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
