// Code generated by ent, DO NOT EDIT.

package ent

import (
	"errors"
	"fmt"

	"github.com/GalvinGao/otogenavi-backend/internal/ent/cabinet"
	"github.com/GalvinGao/otogenavi-backend/internal/ent/game"
	"github.com/GalvinGao/otogenavi-backend/internal/ent/location"
	"github.com/GalvinGao/otogenavi-backend/internal/ent/predicate"
)

// CabinetWhereInput represents a where input for filtering Cabinet queries.
type CabinetWhereInput struct {
	Predicates []predicate.Cabinet  `json:"-"`
	Not        *CabinetWhereInput   `json:"not,omitempty"`
	Or         []*CabinetWhereInput `json:"or,omitempty"`
	And        []*CabinetWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "count" field predicates.
	Count       *int  `json:"count,omitempty"`
	CountNEQ    *int  `json:"countNEQ,omitempty"`
	CountIn     []int `json:"countIn,omitempty"`
	CountNotIn  []int `json:"countNotIn,omitempty"`
	CountGT     *int  `json:"countGT,omitempty"`
	CountGTE    *int  `json:"countGTE,omitempty"`
	CountLT     *int  `json:"countLT,omitempty"`
	CountLTE    *int  `json:"countLTE,omitempty"`
	CountIsNil  bool  `json:"countIsNil,omitempty"`
	CountNotNil bool  `json:"countNotNil,omitempty"`

	// "location" edge predicates.
	HasLocation     *bool                 `json:"hasLocation,omitempty"`
	HasLocationWith []*LocationWhereInput `json:"hasLocationWith,omitempty"`

	// "game" edge predicates.
	HasGame     *bool             `json:"hasGame,omitempty"`
	HasGameWith []*GameWhereInput `json:"hasGameWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *CabinetWhereInput) AddPredicates(predicates ...predicate.Cabinet) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the CabinetWhereInput filter on the CabinetQuery builder.
func (i *CabinetWhereInput) Filter(q *CabinetQuery) (*CabinetQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyCabinetWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyCabinetWhereInput is returned in case the CabinetWhereInput is empty.
var ErrEmptyCabinetWhereInput = errors.New("ent: empty predicate CabinetWhereInput")

// P returns a predicate for filtering cabinets.
// An error is returned if the input is empty or invalid.
func (i *CabinetWhereInput) P() (predicate.Cabinet, error) {
	var predicates []predicate.Cabinet
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, cabinet.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Cabinet, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, cabinet.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Cabinet, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, cabinet.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, cabinet.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, cabinet.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, cabinet.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, cabinet.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, cabinet.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, cabinet.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, cabinet.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, cabinet.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, cabinet.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, cabinet.IDContainsFold(*i.IDContainsFold))
	}
	if i.Count != nil {
		predicates = append(predicates, cabinet.CountEQ(*i.Count))
	}
	if i.CountNEQ != nil {
		predicates = append(predicates, cabinet.CountNEQ(*i.CountNEQ))
	}
	if len(i.CountIn) > 0 {
		predicates = append(predicates, cabinet.CountIn(i.CountIn...))
	}
	if len(i.CountNotIn) > 0 {
		predicates = append(predicates, cabinet.CountNotIn(i.CountNotIn...))
	}
	if i.CountGT != nil {
		predicates = append(predicates, cabinet.CountGT(*i.CountGT))
	}
	if i.CountGTE != nil {
		predicates = append(predicates, cabinet.CountGTE(*i.CountGTE))
	}
	if i.CountLT != nil {
		predicates = append(predicates, cabinet.CountLT(*i.CountLT))
	}
	if i.CountLTE != nil {
		predicates = append(predicates, cabinet.CountLTE(*i.CountLTE))
	}
	if i.CountIsNil {
		predicates = append(predicates, cabinet.CountIsNil())
	}
	if i.CountNotNil {
		predicates = append(predicates, cabinet.CountNotNil())
	}

	if i.HasLocation != nil {
		p := cabinet.HasLocation()
		if !*i.HasLocation {
			p = cabinet.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasLocationWith) > 0 {
		with := make([]predicate.Location, 0, len(i.HasLocationWith))
		for _, w := range i.HasLocationWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasLocationWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, cabinet.HasLocationWith(with...))
	}
	if i.HasGame != nil {
		p := cabinet.HasGame()
		if !*i.HasGame {
			p = cabinet.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasGameWith) > 0 {
		with := make([]predicate.Game, 0, len(i.HasGameWith))
		for _, w := range i.HasGameWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasGameWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, cabinet.HasGameWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyCabinetWhereInput
	case 1:
		return predicates[0], nil
	default:
		return cabinet.And(predicates...), nil
	}
}

// GameWhereInput represents a where input for filtering Game queries.
type GameWhereInput struct {
	Predicates []predicate.Game  `json:"-"`
	Not        *GameWhereInput   `json:"not,omitempty"`
	Or         []*GameWhereInput `json:"or,omitempty"`
	And        []*GameWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *GameWhereInput) AddPredicates(predicates ...predicate.Game) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the GameWhereInput filter on the GameQuery builder.
func (i *GameWhereInput) Filter(q *GameQuery) (*GameQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyGameWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyGameWhereInput is returned in case the GameWhereInput is empty.
var ErrEmptyGameWhereInput = errors.New("ent: empty predicate GameWhereInput")

// P returns a predicate for filtering games.
// An error is returned if the input is empty or invalid.
func (i *GameWhereInput) P() (predicate.Game, error) {
	var predicates []predicate.Game
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, game.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Game, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, game.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Game, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, game.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, game.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, game.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, game.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, game.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, game.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, game.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, game.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, game.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, game.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, game.IDContainsFold(*i.IDContainsFold))
	}
	if i.Name != nil {
		predicates = append(predicates, game.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, game.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, game.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, game.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, game.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, game.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, game.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, game.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, game.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, game.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, game.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, game.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, game.NameContainsFold(*i.NameContainsFold))
	}

	switch len(predicates) {
	case 0:
		return nil, ErrEmptyGameWhereInput
	case 1:
		return predicates[0], nil
	default:
		return game.And(predicates...), nil
	}
}

// LocationWhereInput represents a where input for filtering Location queries.
type LocationWhereInput struct {
	Predicates []predicate.Location  `json:"-"`
	Not        *LocationWhereInput   `json:"not,omitempty"`
	Or         []*LocationWhereInput `json:"or,omitempty"`
	And        []*LocationWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "cabinets" edge predicates.
	HasCabinets     *bool                `json:"hasCabinets,omitempty"`
	HasCabinetsWith []*CabinetWhereInput `json:"hasCabinetsWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *LocationWhereInput) AddPredicates(predicates ...predicate.Location) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the LocationWhereInput filter on the LocationQuery builder.
func (i *LocationWhereInput) Filter(q *LocationQuery) (*LocationQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyLocationWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyLocationWhereInput is returned in case the LocationWhereInput is empty.
var ErrEmptyLocationWhereInput = errors.New("ent: empty predicate LocationWhereInput")

// P returns a predicate for filtering locations.
// An error is returned if the input is empty or invalid.
func (i *LocationWhereInput) P() (predicate.Location, error) {
	var predicates []predicate.Location
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, location.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Location, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, location.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Location, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, location.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, location.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, location.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, location.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, location.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, location.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, location.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, location.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, location.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, location.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, location.IDContainsFold(*i.IDContainsFold))
	}
	if i.Name != nil {
		predicates = append(predicates, location.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, location.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, location.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, location.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, location.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, location.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, location.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, location.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, location.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, location.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, location.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, location.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, location.NameContainsFold(*i.NameContainsFold))
	}

	if i.HasCabinets != nil {
		p := location.HasCabinets()
		if !*i.HasCabinets {
			p = location.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasCabinetsWith) > 0 {
		with := make([]predicate.Cabinet, 0, len(i.HasCabinetsWith))
		for _, w := range i.HasCabinetsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasCabinetsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, location.HasCabinetsWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyLocationWhereInput
	case 1:
		return predicates[0], nil
	default:
		return location.And(predicates...), nil
	}
}
