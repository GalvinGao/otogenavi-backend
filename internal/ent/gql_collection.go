// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/GalvinGao/otogenavi-backend/internal/ent/cabinet"
	"github.com/GalvinGao/otogenavi-backend/internal/ent/game"
	"github.com/GalvinGao/otogenavi-backend/internal/ent/location"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (c *CabinetQuery) CollectFields(ctx context.Context, satisfies ...string) (*CabinetQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return c, nil
	}
	if err := c.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return c, nil
}

func (c *CabinetQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(cabinet.Columns))
		selectedFields = []string{cabinet.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "location":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&LocationClient{config: c.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, locationImplementors)...); err != nil {
				return err
			}
			c.withLocation = query
			if _, ok := fieldSeen[cabinet.FieldLocationID]; !ok {
				selectedFields = append(selectedFields, cabinet.FieldLocationID)
				fieldSeen[cabinet.FieldLocationID] = struct{}{}
			}

		case "game":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&GameClient{config: c.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, gameImplementors)...); err != nil {
				return err
			}
			c.withGame = query
			if _, ok := fieldSeen[cabinet.FieldGameID]; !ok {
				selectedFields = append(selectedFields, cabinet.FieldGameID)
				fieldSeen[cabinet.FieldGameID] = struct{}{}
			}
		case "count":
			if _, ok := fieldSeen[cabinet.FieldCount]; !ok {
				selectedFields = append(selectedFields, cabinet.FieldCount)
				fieldSeen[cabinet.FieldCount] = struct{}{}
			}
		case "locationID":
			if _, ok := fieldSeen[cabinet.FieldLocationID]; !ok {
				selectedFields = append(selectedFields, cabinet.FieldLocationID)
				fieldSeen[cabinet.FieldLocationID] = struct{}{}
			}
		case "gameID":
			if _, ok := fieldSeen[cabinet.FieldGameID]; !ok {
				selectedFields = append(selectedFields, cabinet.FieldGameID)
				fieldSeen[cabinet.FieldGameID] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		c.Select(selectedFields...)
	}
	return nil
}

type cabinetPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []CabinetPaginateOption
}

func newCabinetPaginateArgs(rv map[string]any) *cabinetPaginateArgs {
	args := &cabinetPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*CabinetWhereInput); ok {
		args.opts = append(args.opts, WithCabinetFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (ga *GameQuery) CollectFields(ctx context.Context, satisfies ...string) (*GameQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return ga, nil
	}
	if err := ga.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return ga, nil
}

func (ga *GameQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(game.Columns))
		selectedFields = []string{game.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "name":
			if _, ok := fieldSeen[game.FieldName]; !ok {
				selectedFields = append(selectedFields, game.FieldName)
				fieldSeen[game.FieldName] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		ga.Select(selectedFields...)
	}
	return nil
}

type gamePaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []GamePaginateOption
}

func newGamePaginateArgs(rv map[string]any) *gamePaginateArgs {
	args := &gamePaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*GameWhereInput); ok {
		args.opts = append(args.opts, WithGameFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (l *LocationQuery) CollectFields(ctx context.Context, satisfies ...string) (*LocationQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return l, nil
	}
	if err := l.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return l, nil
}

func (l *LocationQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(location.Columns))
		selectedFields = []string{location.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "cabinets":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&CabinetClient{config: l.config}).Query()
			)
			if err := query.collectField(ctx, false, opCtx, field, path, mayAddCondition(satisfies, cabinetImplementors)...); err != nil {
				return err
			}
			l.WithNamedCabinets(alias, func(wq *CabinetQuery) {
				*wq = *query
			})
		case "name":
			if _, ok := fieldSeen[location.FieldName]; !ok {
				selectedFields = append(selectedFields, location.FieldName)
				fieldSeen[location.FieldName] = struct{}{}
			}
		case "rawAddress":
			if _, ok := fieldSeen[location.FieldRawAddress]; !ok {
				selectedFields = append(selectedFields, location.FieldRawAddress)
				fieldSeen[location.FieldRawAddress] = struct{}{}
			}
		case "coordinate":
			if _, ok := fieldSeen[location.FieldCoordinate]; !ok {
				selectedFields = append(selectedFields, location.FieldCoordinate)
				fieldSeen[location.FieldCoordinate] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		l.Select(selectedFields...)
	}
	return nil
}

type locationPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []LocationPaginateOption
}

func newLocationPaginateArgs(rv map[string]any) *locationPaginateArgs {
	args := &locationPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*LocationWhereInput); ok {
		args.opts = append(args.opts, WithLocationFilter(v.Filter))
	}
	return args
}

const (
	afterField     = "after"
	firstField     = "first"
	beforeField    = "before"
	lastField      = "last"
	orderByField   = "orderBy"
	directionField = "direction"
	fieldField     = "field"
	whereField     = "where"
)

func fieldArgs(ctx context.Context, whereInput any, path ...string) map[string]any {
	field := collectedField(ctx, path...)
	if field == nil || field.Arguments == nil {
		return nil
	}
	oc := graphql.GetOperationContext(ctx)
	args := field.ArgumentMap(oc.Variables)
	return unmarshalArgs(ctx, whereInput, args)
}

// unmarshalArgs allows extracting the field arguments from their raw representation.
func unmarshalArgs(ctx context.Context, whereInput any, args map[string]any) map[string]any {
	for _, k := range []string{firstField, lastField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		i, err := graphql.UnmarshalInt(v)
		if err == nil {
			args[k] = &i
		}
	}
	for _, k := range []string{beforeField, afterField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		c := &Cursor{}
		if c.UnmarshalGQL(v) == nil {
			args[k] = c
		}
	}
	if v, ok := args[whereField]; ok && whereInput != nil {
		if err := graphql.UnmarshalInputFromContext(ctx, v, whereInput); err == nil {
			args[whereField] = whereInput
		}
	}

	return args
}

// mayAddCondition appends another type condition to the satisfies list
// if it does not exist in the list.
func mayAddCondition(satisfies []string, typeCond []string) []string {
Cond:
	for _, c := range typeCond {
		for _, s := range satisfies {
			if c == s {
				continue Cond
			}
		}
		satisfies = append(satisfies, c)
	}
	return satisfies
}
