// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/GalvinGao/otogenavi-backend/internal/ent/cabinet"
	"github.com/GalvinGao/otogenavi-backend/internal/ent/game"
	"github.com/GalvinGao/otogenavi-backend/internal/ent/location"
)

// CabinetCreate is the builder for creating a Cabinet entity.
type CabinetCreate struct {
	config
	mutation *CabinetMutation
	hooks    []Hook
}

// SetCount sets the "count" field.
func (cc *CabinetCreate) SetCount(i int) *CabinetCreate {
	cc.mutation.SetCount(i)
	return cc
}

// SetNillableCount sets the "count" field if the given value is not nil.
func (cc *CabinetCreate) SetNillableCount(i *int) *CabinetCreate {
	if i != nil {
		cc.SetCount(*i)
	}
	return cc
}

// SetLocationID sets the "location_id" field.
func (cc *CabinetCreate) SetLocationID(s string) *CabinetCreate {
	cc.mutation.SetLocationID(s)
	return cc
}

// SetGameID sets the "game_id" field.
func (cc *CabinetCreate) SetGameID(s string) *CabinetCreate {
	cc.mutation.SetGameID(s)
	return cc
}

// SetID sets the "id" field.
func (cc *CabinetCreate) SetID(s string) *CabinetCreate {
	cc.mutation.SetID(s)
	return cc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cc *CabinetCreate) SetNillableID(s *string) *CabinetCreate {
	if s != nil {
		cc.SetID(*s)
	}
	return cc
}

// SetLocation sets the "location" edge to the Location entity.
func (cc *CabinetCreate) SetLocation(l *Location) *CabinetCreate {
	return cc.SetLocationID(l.ID)
}

// SetGame sets the "game" edge to the Game entity.
func (cc *CabinetCreate) SetGame(g *Game) *CabinetCreate {
	return cc.SetGameID(g.ID)
}

// Mutation returns the CabinetMutation object of the builder.
func (cc *CabinetCreate) Mutation() *CabinetMutation {
	return cc.mutation
}

// Save creates the Cabinet in the database.
func (cc *CabinetCreate) Save(ctx context.Context) (*Cabinet, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CabinetCreate) SaveX(ctx context.Context) *Cabinet {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CabinetCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CabinetCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CabinetCreate) defaults() {
	if _, ok := cc.mutation.ID(); !ok {
		v := cabinet.DefaultID()
		cc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CabinetCreate) check() error {
	if _, ok := cc.mutation.LocationID(); !ok {
		return &ValidationError{Name: "location_id", err: errors.New(`ent: missing required field "Cabinet.location_id"`)}
	}
	if _, ok := cc.mutation.GameID(); !ok {
		return &ValidationError{Name: "game_id", err: errors.New(`ent: missing required field "Cabinet.game_id"`)}
	}
	if _, ok := cc.mutation.LocationID(); !ok {
		return &ValidationError{Name: "location", err: errors.New(`ent: missing required edge "Cabinet.location"`)}
	}
	if _, ok := cc.mutation.GameID(); !ok {
		return &ValidationError{Name: "game", err: errors.New(`ent: missing required edge "Cabinet.game"`)}
	}
	return nil
}

func (cc *CabinetCreate) sqlSave(ctx context.Context) (*Cabinet, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Cabinet.ID type: %T", _spec.ID.Value)
		}
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CabinetCreate) createSpec() (*Cabinet, *sqlgraph.CreateSpec) {
	var (
		_node = &Cabinet{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(cabinet.Table, sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeString))
	)
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.Count(); ok {
		_spec.SetField(cabinet.FieldCount, field.TypeInt, value)
		_node.Count = &value
	}
	if nodes := cc.mutation.LocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cabinet.LocationTable,
			Columns: []string{cabinet.LocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.LocationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.GameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cabinet.GameTable,
			Columns: []string{cabinet.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.GameID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CabinetCreateBulk is the builder for creating many Cabinet entities in bulk.
type CabinetCreateBulk struct {
	config
	err      error
	builders []*CabinetCreate
}

// Save creates the Cabinet entities in the database.
func (ccb *CabinetCreateBulk) Save(ctx context.Context) ([]*Cabinet, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Cabinet, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CabinetMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CabinetCreateBulk) SaveX(ctx context.Context) []*Cabinet {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CabinetCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CabinetCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
