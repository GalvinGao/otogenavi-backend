// Code generated by ent, DO NOT EDIT.

package location

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the location type in the database.
	Label = "location"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "location_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDeduplicationKey holds the string denoting the deduplication_key field in the database.
	FieldDeduplicationKey = "deduplication_key"
	// FieldRawAddress holds the string denoting the raw_address field in the database.
	FieldRawAddress = "raw_address"
	// FieldCoordinate holds the string denoting the coordinate field in the database.
	FieldCoordinate = "coordinate"
	// EdgeCabinets holds the string denoting the cabinets edge name in mutations.
	EdgeCabinets = "cabinets"
	// CabinetFieldID holds the string denoting the ID field of the Cabinet.
	CabinetFieldID = "cabinet_id"
	// Table holds the table name of the location in the database.
	Table = "locations"
	// CabinetsTable is the table that holds the cabinets relation/edge.
	CabinetsTable = "cabinets"
	// CabinetsInverseTable is the table name for the Cabinet entity.
	// It exists in this package in order to avoid circular dependency with the "cabinet" package.
	CabinetsInverseTable = "cabinets"
	// CabinetsColumn is the table column denoting the cabinets relation/edge.
	CabinetsColumn = "location_id"
)

// Columns holds all SQL columns for location fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDeduplicationKey,
	FieldRawAddress,
	FieldCoordinate,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DeduplicationKeyValidator is a validator for the "deduplication_key" field. It is called by the builders before save.
	DeduplicationKeyValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// OrderOption defines the ordering options for the Location queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDeduplicationKey orders the results by the deduplication_key field.
func ByDeduplicationKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeduplicationKey, opts...).ToFunc()
}

// ByRawAddress orders the results by the raw_address field.
func ByRawAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRawAddress, opts...).ToFunc()
}

// ByCoordinate orders the results by the coordinate field.
func ByCoordinate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCoordinate, opts...).ToFunc()
}

// ByCabinetsCount orders the results by cabinets count.
func ByCabinetsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCabinetsStep(), opts...)
	}
}

// ByCabinets orders the results by cabinets terms.
func ByCabinets(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCabinetsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCabinetsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CabinetsInverseTable, CabinetFieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, CabinetsTable, CabinetsColumn),
	)
}
