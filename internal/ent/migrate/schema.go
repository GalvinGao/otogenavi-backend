// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// CabinetsColumns holds the columns for the "cabinets" table.
	CabinetsColumns = []*schema.Column{
		{Name: "cabinet_id", Type: field.TypeString, Unique: true},
		{Name: "count", Type: field.TypeInt, Nullable: true},
		{Name: "location_id", Type: field.TypeString},
		{Name: "game_id", Type: field.TypeString},
	}
	// CabinetsTable holds the schema information for the "cabinets" table.
	CabinetsTable = &schema.Table{
		Name:       "cabinets",
		Columns:    CabinetsColumns,
		PrimaryKey: []*schema.Column{CabinetsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "cabinets_locations_location",
				Columns:    []*schema.Column{CabinetsColumns[2]},
				RefColumns: []*schema.Column{LocationsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "cabinets_games_game",
				Columns:    []*schema.Column{CabinetsColumns[3]},
				RefColumns: []*schema.Column{GamesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "cabinet_game_id_location_id",
				Unique:  true,
				Columns: []*schema.Column{CabinetsColumns[3], CabinetsColumns[2]},
			},
		},
	}
	// GamesColumns holds the columns for the "games" table.
	GamesColumns = []*schema.Column{
		{Name: "game_id", Type: field.TypeString, Unique: true},
		{Name: "name", Type: field.TypeString, Unique: true},
	}
	// GamesTable holds the schema information for the "games" table.
	GamesTable = &schema.Table{
		Name:       "games",
		Columns:    GamesColumns,
		PrimaryKey: []*schema.Column{GamesColumns[0]},
	}
	// LocationsColumns holds the columns for the "locations" table.
	LocationsColumns = []*schema.Column{
		{Name: "location_id", Type: field.TypeString, Unique: true},
		{Name: "name", Type: field.TypeString},
		{Name: "deduplication_key", Type: field.TypeString, Unique: true},
		{Name: "raw_address", Type: field.TypeString, Nullable: true},
		{Name: "coordinate", Type: field.TypeOther, Nullable: true, SchemaType: map[string]string{"postgres": "geometry(Point,4326)"}},
	}
	// LocationsTable holds the schema information for the "locations" table.
	LocationsTable = &schema.Table{
		Name:       "locations",
		Columns:    LocationsColumns,
		PrimaryKey: []*schema.Column{LocationsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "location_coordinate",
				Unique:  false,
				Columns: []*schema.Column{LocationsColumns[4]},
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		CabinetsTable,
		GamesTable,
		LocationsTable,
	}
)

func init() {
	CabinetsTable.ForeignKeys[0].RefTable = LocationsTable
	CabinetsTable.ForeignKeys[1].RefTable = GamesTable
}
