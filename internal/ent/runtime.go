// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/GalvinGao/otogenavi-backend/internal/ent/cabinet"
	"github.com/GalvinGao/otogenavi-backend/internal/ent/game"
	"github.com/GalvinGao/otogenavi-backend/internal/ent/location"
	"github.com/GalvinGao/otogenavi-backend/internal/ent/schema"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	cabinetFields := schema.Cabinet{}.Fields()
	_ = cabinetFields
	// cabinetDescID is the schema descriptor for id field.
	cabinetDescID := cabinetFields[0].Descriptor()
	// cabinet.DefaultID holds the default value on creation for the id field.
	cabinet.DefaultID = cabinetDescID.Default.(func() string)
	gameFields := schema.Game{}.Fields()
	_ = gameFields
	// gameDescID is the schema descriptor for id field.
	gameDescID := gameFields[0].Descriptor()
	// game.DefaultID holds the default value on creation for the id field.
	game.DefaultID = gameDescID.Default.(func() string)
	locationFields := schema.Location{}.Fields()
	_ = locationFields
	// locationDescName is the schema descriptor for name field.
	locationDescName := locationFields[1].Descriptor()
	// location.NameValidator is a validator for the "name" field. It is called by the builders before save.
	location.NameValidator = locationDescName.Validators[0].(func(string) error)
	// locationDescDeduplicationKey is the schema descriptor for deduplication_key field.
	locationDescDeduplicationKey := locationFields[2].Descriptor()
	// location.DeduplicationKeyValidator is a validator for the "deduplication_key" field. It is called by the builders before save.
	location.DeduplicationKeyValidator = locationDescDeduplicationKey.Validators[0].(func(string) error)
	// locationDescID is the schema descriptor for id field.
	locationDescID := locationFields[0].Descriptor()
	// location.DefaultID holds the default value on creation for the id field.
	location.DefaultID = locationDescID.Default.(func() string)
}
