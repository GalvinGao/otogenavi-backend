// Code generated by ent, DO NOT EDIT.

package cabinet

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/GalvinGao/otogenavi-backend/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Cabinet {
	return predicate.Cabinet(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Cabinet {
	return predicate.Cabinet(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Cabinet {
	return predicate.Cabinet(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Cabinet {
	return predicate.Cabinet(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Cabinet {
	return predicate.Cabinet(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Cabinet {
	return predicate.Cabinet(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Cabinet {
	return predicate.Cabinet(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Cabinet {
	return predicate.Cabinet(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Cabinet {
	return predicate.Cabinet(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Cabinet {
	return predicate.Cabinet(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Cabinet {
	return predicate.Cabinet(sql.FieldContainsFold(FieldID, id))
}

// Count applies equality check predicate on the "count" field. It's identical to CountEQ.
func Count(v int) predicate.Cabinet {
	return predicate.Cabinet(sql.FieldEQ(FieldCount, v))
}

// LocationID applies equality check predicate on the "location_id" field. It's identical to LocationIDEQ.
func LocationID(v string) predicate.Cabinet {
	return predicate.Cabinet(sql.FieldEQ(FieldLocationID, v))
}

// GameID applies equality check predicate on the "game_id" field. It's identical to GameIDEQ.
func GameID(v string) predicate.Cabinet {
	return predicate.Cabinet(sql.FieldEQ(FieldGameID, v))
}

// CountEQ applies the EQ predicate on the "count" field.
func CountEQ(v int) predicate.Cabinet {
	return predicate.Cabinet(sql.FieldEQ(FieldCount, v))
}

// CountNEQ applies the NEQ predicate on the "count" field.
func CountNEQ(v int) predicate.Cabinet {
	return predicate.Cabinet(sql.FieldNEQ(FieldCount, v))
}

// CountIn applies the In predicate on the "count" field.
func CountIn(vs ...int) predicate.Cabinet {
	return predicate.Cabinet(sql.FieldIn(FieldCount, vs...))
}

// CountNotIn applies the NotIn predicate on the "count" field.
func CountNotIn(vs ...int) predicate.Cabinet {
	return predicate.Cabinet(sql.FieldNotIn(FieldCount, vs...))
}

// CountGT applies the GT predicate on the "count" field.
func CountGT(v int) predicate.Cabinet {
	return predicate.Cabinet(sql.FieldGT(FieldCount, v))
}

// CountGTE applies the GTE predicate on the "count" field.
func CountGTE(v int) predicate.Cabinet {
	return predicate.Cabinet(sql.FieldGTE(FieldCount, v))
}

// CountLT applies the LT predicate on the "count" field.
func CountLT(v int) predicate.Cabinet {
	return predicate.Cabinet(sql.FieldLT(FieldCount, v))
}

// CountLTE applies the LTE predicate on the "count" field.
func CountLTE(v int) predicate.Cabinet {
	return predicate.Cabinet(sql.FieldLTE(FieldCount, v))
}

// CountIsNil applies the IsNil predicate on the "count" field.
func CountIsNil() predicate.Cabinet {
	return predicate.Cabinet(sql.FieldIsNull(FieldCount))
}

// CountNotNil applies the NotNil predicate on the "count" field.
func CountNotNil() predicate.Cabinet {
	return predicate.Cabinet(sql.FieldNotNull(FieldCount))
}

// LocationIDEQ applies the EQ predicate on the "location_id" field.
func LocationIDEQ(v string) predicate.Cabinet {
	return predicate.Cabinet(sql.FieldEQ(FieldLocationID, v))
}

// LocationIDNEQ applies the NEQ predicate on the "location_id" field.
func LocationIDNEQ(v string) predicate.Cabinet {
	return predicate.Cabinet(sql.FieldNEQ(FieldLocationID, v))
}

// LocationIDIn applies the In predicate on the "location_id" field.
func LocationIDIn(vs ...string) predicate.Cabinet {
	return predicate.Cabinet(sql.FieldIn(FieldLocationID, vs...))
}

// LocationIDNotIn applies the NotIn predicate on the "location_id" field.
func LocationIDNotIn(vs ...string) predicate.Cabinet {
	return predicate.Cabinet(sql.FieldNotIn(FieldLocationID, vs...))
}

// LocationIDGT applies the GT predicate on the "location_id" field.
func LocationIDGT(v string) predicate.Cabinet {
	return predicate.Cabinet(sql.FieldGT(FieldLocationID, v))
}

// LocationIDGTE applies the GTE predicate on the "location_id" field.
func LocationIDGTE(v string) predicate.Cabinet {
	return predicate.Cabinet(sql.FieldGTE(FieldLocationID, v))
}

// LocationIDLT applies the LT predicate on the "location_id" field.
func LocationIDLT(v string) predicate.Cabinet {
	return predicate.Cabinet(sql.FieldLT(FieldLocationID, v))
}

// LocationIDLTE applies the LTE predicate on the "location_id" field.
func LocationIDLTE(v string) predicate.Cabinet {
	return predicate.Cabinet(sql.FieldLTE(FieldLocationID, v))
}

// LocationIDContains applies the Contains predicate on the "location_id" field.
func LocationIDContains(v string) predicate.Cabinet {
	return predicate.Cabinet(sql.FieldContains(FieldLocationID, v))
}

// LocationIDHasPrefix applies the HasPrefix predicate on the "location_id" field.
func LocationIDHasPrefix(v string) predicate.Cabinet {
	return predicate.Cabinet(sql.FieldHasPrefix(FieldLocationID, v))
}

// LocationIDHasSuffix applies the HasSuffix predicate on the "location_id" field.
func LocationIDHasSuffix(v string) predicate.Cabinet {
	return predicate.Cabinet(sql.FieldHasSuffix(FieldLocationID, v))
}

// LocationIDEqualFold applies the EqualFold predicate on the "location_id" field.
func LocationIDEqualFold(v string) predicate.Cabinet {
	return predicate.Cabinet(sql.FieldEqualFold(FieldLocationID, v))
}

// LocationIDContainsFold applies the ContainsFold predicate on the "location_id" field.
func LocationIDContainsFold(v string) predicate.Cabinet {
	return predicate.Cabinet(sql.FieldContainsFold(FieldLocationID, v))
}

// GameIDEQ applies the EQ predicate on the "game_id" field.
func GameIDEQ(v string) predicate.Cabinet {
	return predicate.Cabinet(sql.FieldEQ(FieldGameID, v))
}

// GameIDNEQ applies the NEQ predicate on the "game_id" field.
func GameIDNEQ(v string) predicate.Cabinet {
	return predicate.Cabinet(sql.FieldNEQ(FieldGameID, v))
}

// GameIDIn applies the In predicate on the "game_id" field.
func GameIDIn(vs ...string) predicate.Cabinet {
	return predicate.Cabinet(sql.FieldIn(FieldGameID, vs...))
}

// GameIDNotIn applies the NotIn predicate on the "game_id" field.
func GameIDNotIn(vs ...string) predicate.Cabinet {
	return predicate.Cabinet(sql.FieldNotIn(FieldGameID, vs...))
}

// GameIDGT applies the GT predicate on the "game_id" field.
func GameIDGT(v string) predicate.Cabinet {
	return predicate.Cabinet(sql.FieldGT(FieldGameID, v))
}

// GameIDGTE applies the GTE predicate on the "game_id" field.
func GameIDGTE(v string) predicate.Cabinet {
	return predicate.Cabinet(sql.FieldGTE(FieldGameID, v))
}

// GameIDLT applies the LT predicate on the "game_id" field.
func GameIDLT(v string) predicate.Cabinet {
	return predicate.Cabinet(sql.FieldLT(FieldGameID, v))
}

// GameIDLTE applies the LTE predicate on the "game_id" field.
func GameIDLTE(v string) predicate.Cabinet {
	return predicate.Cabinet(sql.FieldLTE(FieldGameID, v))
}

// GameIDContains applies the Contains predicate on the "game_id" field.
func GameIDContains(v string) predicate.Cabinet {
	return predicate.Cabinet(sql.FieldContains(FieldGameID, v))
}

// GameIDHasPrefix applies the HasPrefix predicate on the "game_id" field.
func GameIDHasPrefix(v string) predicate.Cabinet {
	return predicate.Cabinet(sql.FieldHasPrefix(FieldGameID, v))
}

// GameIDHasSuffix applies the HasSuffix predicate on the "game_id" field.
func GameIDHasSuffix(v string) predicate.Cabinet {
	return predicate.Cabinet(sql.FieldHasSuffix(FieldGameID, v))
}

// GameIDEqualFold applies the EqualFold predicate on the "game_id" field.
func GameIDEqualFold(v string) predicate.Cabinet {
	return predicate.Cabinet(sql.FieldEqualFold(FieldGameID, v))
}

// GameIDContainsFold applies the ContainsFold predicate on the "game_id" field.
func GameIDContainsFold(v string) predicate.Cabinet {
	return predicate.Cabinet(sql.FieldContainsFold(FieldGameID, v))
}

// HasLocation applies the HasEdge predicate on the "location" edge.
func HasLocation() predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, LocationTable, LocationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLocationWith applies the HasEdge predicate on the "location" edge with a given conditions (other predicates).
func HasLocationWith(preds ...predicate.Location) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		step := newLocationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGame applies the HasEdge predicate on the "game" edge.
func HasGame() predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, GameTable, GameColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGameWith applies the HasEdge predicate on the "game" edge with a given conditions (other predicates).
func HasGameWith(preds ...predicate.Game) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		step := newGameStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Cabinet) predicate.Cabinet {
	return predicate.Cabinet(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Cabinet) predicate.Cabinet {
	return predicate.Cabinet(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Cabinet) predicate.Cabinet {
	return predicate.Cabinet(sql.NotPredicates(p))
}
