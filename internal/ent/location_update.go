// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/GalvinGao/otogenavi-backend/internal/ent/cabinet"
	"github.com/GalvinGao/otogenavi-backend/internal/ent/location"
	"github.com/GalvinGao/otogenavi-backend/internal/ent/predicate"
	"github.com/GalvinGao/otogenavi-backend/internal/x/postgis"
)

// LocationUpdate is the builder for updating Location entities.
type LocationUpdate struct {
	config
	hooks    []Hook
	mutation *LocationMutation
}

// Where appends a list predicates to the LocationUpdate builder.
func (lu *LocationUpdate) Where(ps ...predicate.Location) *LocationUpdate {
	lu.mutation.Where(ps...)
	return lu
}

// SetName sets the "name" field.
func (lu *LocationUpdate) SetName(s string) *LocationUpdate {
	lu.mutation.SetName(s)
	return lu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (lu *LocationUpdate) SetNillableName(s *string) *LocationUpdate {
	if s != nil {
		lu.SetName(*s)
	}
	return lu
}

// SetDeduplicationKey sets the "deduplication_key" field.
func (lu *LocationUpdate) SetDeduplicationKey(s string) *LocationUpdate {
	lu.mutation.SetDeduplicationKey(s)
	return lu
}

// SetNillableDeduplicationKey sets the "deduplication_key" field if the given value is not nil.
func (lu *LocationUpdate) SetNillableDeduplicationKey(s *string) *LocationUpdate {
	if s != nil {
		lu.SetDeduplicationKey(*s)
	}
	return lu
}

// SetRawAddress sets the "raw_address" field.
func (lu *LocationUpdate) SetRawAddress(s string) *LocationUpdate {
	lu.mutation.SetRawAddress(s)
	return lu
}

// SetNillableRawAddress sets the "raw_address" field if the given value is not nil.
func (lu *LocationUpdate) SetNillableRawAddress(s *string) *LocationUpdate {
	if s != nil {
		lu.SetRawAddress(*s)
	}
	return lu
}

// ClearRawAddress clears the value of the "raw_address" field.
func (lu *LocationUpdate) ClearRawAddress() *LocationUpdate {
	lu.mutation.ClearRawAddress()
	return lu
}

// SetCoordinate sets the "coordinate" field.
func (lu *LocationUpdate) SetCoordinate(po *postgis.PointS) *LocationUpdate {
	lu.mutation.SetCoordinate(po)
	return lu
}

// ClearCoordinate clears the value of the "coordinate" field.
func (lu *LocationUpdate) ClearCoordinate() *LocationUpdate {
	lu.mutation.ClearCoordinate()
	return lu
}

// AddCabinetIDs adds the "cabinets" edge to the Cabinet entity by IDs.
func (lu *LocationUpdate) AddCabinetIDs(ids ...string) *LocationUpdate {
	lu.mutation.AddCabinetIDs(ids...)
	return lu
}

// AddCabinets adds the "cabinets" edges to the Cabinet entity.
func (lu *LocationUpdate) AddCabinets(c ...*Cabinet) *LocationUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return lu.AddCabinetIDs(ids...)
}

// Mutation returns the LocationMutation object of the builder.
func (lu *LocationUpdate) Mutation() *LocationMutation {
	return lu.mutation
}

// ClearCabinets clears all "cabinets" edges to the Cabinet entity.
func (lu *LocationUpdate) ClearCabinets() *LocationUpdate {
	lu.mutation.ClearCabinets()
	return lu
}

// RemoveCabinetIDs removes the "cabinets" edge to Cabinet entities by IDs.
func (lu *LocationUpdate) RemoveCabinetIDs(ids ...string) *LocationUpdate {
	lu.mutation.RemoveCabinetIDs(ids...)
	return lu
}

// RemoveCabinets removes "cabinets" edges to Cabinet entities.
func (lu *LocationUpdate) RemoveCabinets(c ...*Cabinet) *LocationUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return lu.RemoveCabinetIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lu *LocationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, lu.sqlSave, lu.mutation, lu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lu *LocationUpdate) SaveX(ctx context.Context) int {
	affected, err := lu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lu *LocationUpdate) Exec(ctx context.Context) error {
	_, err := lu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lu *LocationUpdate) ExecX(ctx context.Context) {
	if err := lu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lu *LocationUpdate) check() error {
	if v, ok := lu.mutation.Name(); ok {
		if err := location.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Location.name": %w`, err)}
		}
	}
	if v, ok := lu.mutation.DeduplicationKey(); ok {
		if err := location.DeduplicationKeyValidator(v); err != nil {
			return &ValidationError{Name: "deduplication_key", err: fmt.Errorf(`ent: validator failed for field "Location.deduplication_key": %w`, err)}
		}
	}
	return nil
}

func (lu *LocationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := lu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(location.Table, location.Columns, sqlgraph.NewFieldSpec(location.FieldID, field.TypeString))
	if ps := lu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lu.mutation.Name(); ok {
		_spec.SetField(location.FieldName, field.TypeString, value)
	}
	if value, ok := lu.mutation.DeduplicationKey(); ok {
		_spec.SetField(location.FieldDeduplicationKey, field.TypeString, value)
	}
	if value, ok := lu.mutation.RawAddress(); ok {
		_spec.SetField(location.FieldRawAddress, field.TypeString, value)
	}
	if lu.mutation.RawAddressCleared() {
		_spec.ClearField(location.FieldRawAddress, field.TypeString)
	}
	if value, ok := lu.mutation.Coordinate(); ok {
		_spec.SetField(location.FieldCoordinate, field.TypeOther, value)
	}
	if lu.mutation.CoordinateCleared() {
		_spec.ClearField(location.FieldCoordinate, field.TypeOther)
	}
	if lu.mutation.CabinetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   location.CabinetsTable,
			Columns: []string{location.CabinetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.RemovedCabinetsIDs(); len(nodes) > 0 && !lu.mutation.CabinetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   location.CabinetsTable,
			Columns: []string{location.CabinetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.CabinetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   location.CabinetsTable,
			Columns: []string{location.CabinetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{location.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lu.mutation.done = true
	return n, nil
}

// LocationUpdateOne is the builder for updating a single Location entity.
type LocationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LocationMutation
}

// SetName sets the "name" field.
func (luo *LocationUpdateOne) SetName(s string) *LocationUpdateOne {
	luo.mutation.SetName(s)
	return luo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (luo *LocationUpdateOne) SetNillableName(s *string) *LocationUpdateOne {
	if s != nil {
		luo.SetName(*s)
	}
	return luo
}

// SetDeduplicationKey sets the "deduplication_key" field.
func (luo *LocationUpdateOne) SetDeduplicationKey(s string) *LocationUpdateOne {
	luo.mutation.SetDeduplicationKey(s)
	return luo
}

// SetNillableDeduplicationKey sets the "deduplication_key" field if the given value is not nil.
func (luo *LocationUpdateOne) SetNillableDeduplicationKey(s *string) *LocationUpdateOne {
	if s != nil {
		luo.SetDeduplicationKey(*s)
	}
	return luo
}

// SetRawAddress sets the "raw_address" field.
func (luo *LocationUpdateOne) SetRawAddress(s string) *LocationUpdateOne {
	luo.mutation.SetRawAddress(s)
	return luo
}

// SetNillableRawAddress sets the "raw_address" field if the given value is not nil.
func (luo *LocationUpdateOne) SetNillableRawAddress(s *string) *LocationUpdateOne {
	if s != nil {
		luo.SetRawAddress(*s)
	}
	return luo
}

// ClearRawAddress clears the value of the "raw_address" field.
func (luo *LocationUpdateOne) ClearRawAddress() *LocationUpdateOne {
	luo.mutation.ClearRawAddress()
	return luo
}

// SetCoordinate sets the "coordinate" field.
func (luo *LocationUpdateOne) SetCoordinate(po *postgis.PointS) *LocationUpdateOne {
	luo.mutation.SetCoordinate(po)
	return luo
}

// ClearCoordinate clears the value of the "coordinate" field.
func (luo *LocationUpdateOne) ClearCoordinate() *LocationUpdateOne {
	luo.mutation.ClearCoordinate()
	return luo
}

// AddCabinetIDs adds the "cabinets" edge to the Cabinet entity by IDs.
func (luo *LocationUpdateOne) AddCabinetIDs(ids ...string) *LocationUpdateOne {
	luo.mutation.AddCabinetIDs(ids...)
	return luo
}

// AddCabinets adds the "cabinets" edges to the Cabinet entity.
func (luo *LocationUpdateOne) AddCabinets(c ...*Cabinet) *LocationUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return luo.AddCabinetIDs(ids...)
}

// Mutation returns the LocationMutation object of the builder.
func (luo *LocationUpdateOne) Mutation() *LocationMutation {
	return luo.mutation
}

// ClearCabinets clears all "cabinets" edges to the Cabinet entity.
func (luo *LocationUpdateOne) ClearCabinets() *LocationUpdateOne {
	luo.mutation.ClearCabinets()
	return luo
}

// RemoveCabinetIDs removes the "cabinets" edge to Cabinet entities by IDs.
func (luo *LocationUpdateOne) RemoveCabinetIDs(ids ...string) *LocationUpdateOne {
	luo.mutation.RemoveCabinetIDs(ids...)
	return luo
}

// RemoveCabinets removes "cabinets" edges to Cabinet entities.
func (luo *LocationUpdateOne) RemoveCabinets(c ...*Cabinet) *LocationUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return luo.RemoveCabinetIDs(ids...)
}

// Where appends a list predicates to the LocationUpdate builder.
func (luo *LocationUpdateOne) Where(ps ...predicate.Location) *LocationUpdateOne {
	luo.mutation.Where(ps...)
	return luo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (luo *LocationUpdateOne) Select(field string, fields ...string) *LocationUpdateOne {
	luo.fields = append([]string{field}, fields...)
	return luo
}

// Save executes the query and returns the updated Location entity.
func (luo *LocationUpdateOne) Save(ctx context.Context) (*Location, error) {
	return withHooks(ctx, luo.sqlSave, luo.mutation, luo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (luo *LocationUpdateOne) SaveX(ctx context.Context) *Location {
	node, err := luo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (luo *LocationUpdateOne) Exec(ctx context.Context) error {
	_, err := luo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luo *LocationUpdateOne) ExecX(ctx context.Context) {
	if err := luo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (luo *LocationUpdateOne) check() error {
	if v, ok := luo.mutation.Name(); ok {
		if err := location.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Location.name": %w`, err)}
		}
	}
	if v, ok := luo.mutation.DeduplicationKey(); ok {
		if err := location.DeduplicationKeyValidator(v); err != nil {
			return &ValidationError{Name: "deduplication_key", err: fmt.Errorf(`ent: validator failed for field "Location.deduplication_key": %w`, err)}
		}
	}
	return nil
}

func (luo *LocationUpdateOne) sqlSave(ctx context.Context) (_node *Location, err error) {
	if err := luo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(location.Table, location.Columns, sqlgraph.NewFieldSpec(location.FieldID, field.TypeString))
	id, ok := luo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Location.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := luo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, location.FieldID)
		for _, f := range fields {
			if !location.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != location.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := luo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := luo.mutation.Name(); ok {
		_spec.SetField(location.FieldName, field.TypeString, value)
	}
	if value, ok := luo.mutation.DeduplicationKey(); ok {
		_spec.SetField(location.FieldDeduplicationKey, field.TypeString, value)
	}
	if value, ok := luo.mutation.RawAddress(); ok {
		_spec.SetField(location.FieldRawAddress, field.TypeString, value)
	}
	if luo.mutation.RawAddressCleared() {
		_spec.ClearField(location.FieldRawAddress, field.TypeString)
	}
	if value, ok := luo.mutation.Coordinate(); ok {
		_spec.SetField(location.FieldCoordinate, field.TypeOther, value)
	}
	if luo.mutation.CoordinateCleared() {
		_spec.ClearField(location.FieldCoordinate, field.TypeOther)
	}
	if luo.mutation.CabinetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   location.CabinetsTable,
			Columns: []string{location.CabinetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.RemovedCabinetsIDs(); len(nodes) > 0 && !luo.mutation.CabinetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   location.CabinetsTable,
			Columns: []string{location.CabinetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.CabinetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   location.CabinetsTable,
			Columns: []string{location.CabinetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Location{config: luo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, luo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{location.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	luo.mutation.done = true
	return _node, nil
}
